package com.alexbravo;

import javax.swing.*;
import java.io.*;
import java.util.concurrent.TimeUnit;

/*
 * TextAnalyzerFrame.java
 *
 */
public class TextAnalyzerFrame extends javax.swing.JFrame {

    /**
     * Creates new form TextAnalyzerFrame
     */
    private TextAnalyzerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonGroup mapTypeButtonGroup = new ButtonGroup();
        logPanel = new javax.swing.JPanel();
        JScrollPane logScrollPane = new JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        JPanel mapTypePanel = new JPanel();
        useHashMapRadioButton = new javax.swing.JRadioButton();
        JRadioButton useTreeMapRadioButton = new JRadioButton();
        JPanel buttonPanel = new JPanel();
        JButton analyzeTextButton = new JButton();
        JButton showWordsButton = new JButton();
        JButton showWordsByFrequencyButton = new JButton();
        JButton lookupWordButton = new JButton();
        JButton clearLogButton = new JButton();
        JButton saveLogToFileButton = new JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Text Analyzer Log"));

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logScrollPane.setViewportView(logTextArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
                logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
        );
        logPanelLayout.setVerticalGroup(
                logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );

        mapTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Map Type"));

        mapTypeButtonGroup.add(useHashMapRadioButton);
        useHashMapRadioButton.setSelected(true);
        useHashMapRadioButton.setText("Use HashMap");

        mapTypeButtonGroup.add(useTreeMapRadioButton);
        useTreeMapRadioButton.setText("Use TreeMap");

        javax.swing.GroupLayout mapTypePanelLayout = new javax.swing.GroupLayout(mapTypePanel);
        mapTypePanel.setLayout(mapTypePanelLayout);
        mapTypePanelLayout.setHorizontalGroup(
                mapTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mapTypePanelLayout.createSequentialGroup()
                                .addContainerGap(27, Short.MAX_VALUE)
                                .addGroup(mapTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(useTreeMapRadioButton)
                                        .addComponent(useHashMapRadioButton))
                                .addGap(24, 24, 24))
        );
        mapTypePanelLayout.setVerticalGroup(
                mapTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mapTypePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(useHashMapRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(useTreeMapRadioButton)
                                .addContainerGap(35, Short.MAX_VALUE))
        );

        buttonPanel.setLayout(new java.awt.GridLayout(2, 3));

        analyzeTextButton.setText("Analyze Text");
        analyzeTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeTextButtonActionPerformed();
            }
        });
        buttonPanel.add(analyzeTextButton);

        showWordsButton.setText("Show Words");
        showWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWordsButtonActionPerformed();
            }
        });
        buttonPanel.add(showWordsButton);

        showWordsByFrequencyButton.setText("Show Words By Frequency");
        showWordsByFrequencyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWordsByionButtonFrequencyButtonAct();
            }
        });
        buttonPanel.add(showWordsByFrequencyButton);

        lookupWordButton.setText("Lookup Word");
        lookupWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupWordButtonActionPerformed();
            }
        });
        buttonPanel.add(lookupWordButton);

        clearLogButton.setText("Clear Log");
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed();
            }
        });
        buttonPanel.add(clearLogButton);

        saveLogToFileButton.setText("Save Log to File");
        saveLogToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLogToFileButtonnActionPerformed();
            }
        });
        buttonPanel.add(saveLogToFileButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addComponent(mapTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        629, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(mapTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        131, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed() {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(logPanel, "Are you sure you want to clear the log?",
                "Clear Log", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            logTextArea.setText("");
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveLogToFileButtonnActionPerformed() {
        //GEN-FIRST:event_saveLogToFileButtonnActionPerformed
        // TODO add your handling code here:
        if (!logTextArea.getText().equals("")) {
            JFileChooser saveFile = new JFileChooser();
            int action = saveFile.showSaveDialog(logPanel);
            if (action == JFileChooser.APPROVE_OPTION) {
                File file = saveFile.getSelectedFile();
                try {
                    if (file.exists()) {
                        int overwrite = JOptionPane.showConfirmDialog(logPanel, "The file already exists. Overwrite it?");
                        if (overwrite == JOptionPane.YES_OPTION) {
                            try (BufferedWriter save = new BufferedWriter(new FileWriter(file))) {
                                save.write(logTextArea.getText());
                            }
                        }
                    } else {
                        try (BufferedWriter save = new BufferedWriter(new FileWriter(file))) {
                            save.write(logTextArea.getText());
                        }
                    }
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_saveLogToFileButtonnActionPerformed

    private void analyzeTextButtonActionPerformed() {
        //GEN-FIRST:event_analyzeTextButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        javax.swing.filechooser.FileFilter textFilter = new javax.swing.filechooser.FileFilter() {

            @Override
            public String getDescription() {
                return null;
            }

            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith("txt") || f.isDirectory();
            }
        };
        fileChooser.setFileFilter(textFilter);
        int actionSelected = fileChooser.showOpenDialog(logTextArea);
        if (actionSelected == JFileChooser.APPROVE_OPTION) {
            if (useHashMapRadioButton.isSelected()) {
                textAnalyzer = new TextAnalyzer("hashmap");
            } else {
                textAnalyzer = new TextAnalyzer("treemap");
            }
            long startTime = System.nanoTime();
            long endTime = 0;
            try {
                textAnalyzer.analyzeText(fileChooser.getSelectedFile().getPath());
                endTime = System.nanoTime();
            } catch (IOException e) {
                e.printStackTrace();
            }
            logTextArea.append("File name: " + fileChooser.getSelectedFile().getName() + "\n");
            logTextArea.append("Number of unique words: " + textAnalyzer.getUniqueWordCount() + "\n");
            logTextArea.append("Total number of words: " + textAnalyzer.getWordCount() + "\n");
            logTextArea.append("Time taken to analyze the file: "
                    + TimeUnit.NANOSECONDS.toMillis(endTime - startTime) + " milliseconds\n");
        }

    }//GEN-LAST:event_analyzeTextButtonActionPerformed

    private void lookupWordButtonActionPerformed() {//GEN-FIRST:event_lookupWordButtonActionPerformed
        // TODO add your handling code here:
        if (textAnalyzer != null) {
            long startTime = System.nanoTime();
            long endTime;
            String word = JOptionPane.showInputDialog(logPanel, "Enter the word you're looking for");
            if (textAnalyzer.findWord(word) != null) {
                logTextArea.append(textAnalyzer.findWord(word).getText() + " - Occurred "
                        + textAnalyzer.findWord(word).getFrequencyCount() + " times. \n");
                endTime = System.nanoTime();
                logTextArea.append("Operation took " + TimeUnit.NANOSECONDS.toMillis(endTime - startTime) + " milliseconds\n");
            } else {
                logTextArea.append("Word not found\n");
            }
        }
    }//GEN-LAST:event_lookupWordButtonActionPerformed

    private void showWordsButtonActionPerformed() {//GEN-FIRST:event_showWordsButtonActionPerformed
        // TODO add your handling code here:
        if (textAnalyzer != null) {
            long startTime = System.nanoTime();
            for (IWordData word : textAnalyzer.allWordsOrderByText()) {
                logTextArea.append(word.getText() + " - Occurred " + word.getFrequencyCount() + " times\n");
            }
            long endTime = System.nanoTime();
            logTextArea.append("It took " + TimeUnit.NANOSECONDS.toMillis(endTime - startTime)
                    + " milliseconds to analyze these words\n");
        }
    }//GEN-LAST:event_showWordsButtonActionPerformed

    private void showWordsByionButtonFrequencyButtonAct() {//GEN-FIRST:event_showWordsByionButtonFrequencyButtonAct
        // TODO add your handling code here:
        if (textAnalyzer != null) {
            long startTime = System.nanoTime();
            for (IWordData word : textAnalyzer.allWordsOrdedByFrequencyCount()) {
                logTextArea.append(word.getText() + " - Occurred " + word.getFrequencyCount() + " times\n");
            }
            long endTime = System.nanoTime();
            logTextArea.append("It took " + TimeUnit.NANOSECONDS.toMillis(endTime - startTime) + " milliseconds to analyze these words\n");
        }
    }//GEN-LAST:event_showWordsByionButtonFrequencyButtonAct

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextAnalyzerFrame().setVisible(true);
            }
        });
    }

    private TextAnalyzer textAnalyzer;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JRadioButton useHashMapRadioButton;
    // End of variables declaration//GEN-END:variables

}
